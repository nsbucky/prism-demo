services:
    nginx:
        image: 'nginx:latest'
        ports:
            - '${HTTP_PORT:-8000}:80'
            - '${SSL_PORT:-443}:443'
            - '${REVERB_SERVER_PORT:-8080}:8080'
        environment:
            - SSL_PORT=${SSL_PORT:-443}
            - APP_SERVICE=${APP_SERVICE:-prism-demo.test}
            - SERVER_NAME=${SERVER_NAME:-localhost}
            - SSL_DOMAIN=${SSL_DOMAIN:-localhost}
            - SSL_ALT_NAME=${SSL_ALT_NAME:-DNS:localhost}
        volumes:
            - 'sail-nginx:/etc/nginx/certs'
            - './nginx/templates:/etc/nginx/templates'
            - './vendor/ryoluo/sail-ssl/nginx/generate-ssl-cert.sh:/docker-entrypoint.d/99-generate-ssl-cert.sh'
        depends_on:
            - ${APP_SERVICE:-prism-demo.test}
        networks:
            - sail
    prism-demo.test:
        build:
            context: ./docker/8.4
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.4/app
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - mysql
            - pgsql
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        volumes:
            - 'sail-mysql:/var/lib/mysql'
            - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s
    ollama:
        image: 'docker.io/ollama/ollama:latest'
        ports:
            - '7869:11434'
        volumes:
            - '.:/code'
            - './ollama/ollama:/root/.ollama'
            - './ollama-init.sh:/ollama-init.sh'
            - './app/src/.env:/.env'
        container_name: ollama
        pull_policy: always
        tty: true
        restart: always
        environment:
            - OLLAMA_KEEP_ALIVE=24h
            - OLLAMA_HOST=0.0.0.0
            - OLLAMA_DEFAULT_MODEL=llama3.2
            - SKIP_OLLAMA_MODELS=${SKIP_OLLAMA_MODELS:-false}
        entrypoint:
            - /usr/bin/bash
            - /ollama-init.sh
        networks:
            - sail
    pgsql:
        #image: 'postgres:17' the image below already has pgvector
        image: 'ankane/pgvector'
        ports:
            - '${FORWARD_PG_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './docker/pgsql/vector-extension.sql:/docker-entrypoint-initdb.d/11-vector-extension.sql'
            - './docker/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s
    open-webui:
        image: ghcr.io/open-webui/open-webui:main
        expose:
            - "3000"
        environment:
            OPENAI_API_BASE_URLS: '${OPENAI_API_BASE_URLS}'
            WEBUI_SECRET_KEY: '${WEBUI_SECRET_KEY}'
            # Add these important environment variables
            WEBUI_SERVER_NAME: "webui.${SERVER_NAME:-localhost}"
            # Ensure OpenWebUI knows it's behind a proxy
            UVICORN_PROXY_HEADERS: "True"
            PORT: "3000"
        networks:
            - sail
        volumes:
            - ./open-webui:/app/backend/data
    watchtower:
        image: containrrr/watchtower
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command: --interval 300 open-webui
        depends_on:
            - open-webui
networks:
    sail:
        driver: bridge
volumes:
    sail-nginx:
        driver: local
    sail-mysql:
        driver: local
    sail-pgsql:
        driver: local
    open-webui:
        driver: local
